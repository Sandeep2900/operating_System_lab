import java.util.Arrays;

class BankersAlgorithm {
    private int processes; // Number of processes
    private int resources; // Number of resources

    private int[][] max; // Maximum demand of each process
    private int[][] allocated; // Resources currently allocated to each process
    private int[][] need; // Remaining resources needed by each process
    private int[] available; // Available resources

    public BankersAlgorithm(int processes, int resources) {
        this.processes = processes;
        this.resources = resources;

        max = new int[processes][resources];
        allocated = new int[processes][resources];
        need = new int[processes][resources];
        available = new int[resources];
    }

    public void setMax(int process, int[] maxDemand) {
        max[process] = Arrays.copyOf(maxDemand, resources);
    }

    public void setAllocation(int process, int[] allocation) {
        allocated[process] = Arrays.copyOf(allocation, resources);
        updateNeed();
    }

    public void setAvailable(int[] availableResources) {
        available = Arrays.copyOf(availableResources, resources);
    }

    private void updateNeed() {
        for (int i = 0; i < processes; i++) {
            for (int j = 0; j < resources; j++) {
                need[i][j] = max[i][j] - allocated[i][j];
            }
        }
    }

    public boolean isSafe() {
        boolean[] finish = new boolean[processes];
        int[] work = Arrays.copyOf(available, resources);

        while (true) {
            boolean found = false;

            for (int i = 0; i < processes; i++) {
                if (!finish[i] && isRequestSafe(i, work)) {
                    for (int j = 0; j < resources; j++) {
                        work[j] += allocated[i][j];
                    }

                    finish[i] = true;
                    found = true;
                }
            }

            if (!found) {
                break;
            }
        }

        for (boolean f : finish) {
            if (!f) {
                return false; // If not all processes finish, the system is not safe
            }
        }

        return true; // If all processes finish, the system is safe
    }

    private boolean isRequestSafe(int process, int[] work) {
        for (int i = 0; i < resources; i++) {
            if (need[process][i] > work[i]) {
                return false;
            }
        }
        return true;
    }
}

public class BankersExample {
    public static void main(String[] args) {
        BankersAlgorithm bankers = new BankersAlgorithm(5, 3);

        int[] availableResources = {3, 3, 2};
        bankers.setAvailable(availableResources);

        int[][] maxDemand = {
            {7, 5, 3},
            {3, 2, 2},
            {9, 0, 2},
            {2, 2, 2},
            {4, 3, 3}
        };

        int[][] allocatedResources = {
            {0, 1, 0},
            {2, 0, 0},
            {3, 0, 2},
            {2, 1, 1},
            {0, 0, 2}
        };

        for (int i = 0; i < 5; i++) {
            bankers.setMax(i, maxDemand[i]);
            bankers.setAllocation(i, allocatedResources[i]);
        }

        if (bankers.isSafe()) {
            System.out.println("The system is safe.");
        } else {
            System.out.println("The system is not safe.");
        }
    }
}
